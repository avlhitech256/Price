Все пакеты лицензируются их владельцами. NuGet не несет ответственности за пакеты сторонних производителей и не предоставляет лицензии на такие пакеты. Некоторые пакеты могут включать в себя зависимости, на которые требуются дополнительные лицензии. Для определения зависимостей перейдите по URL-адресу источника (веб-канала) пакетов.

Узел консоли диспетчера пакетов версии 3.5.0.1484

Чтобы увидеть все доступные команды NuGet, введите «get-help NuGet».

PM> Enable-Migrations -ProjectName "DataBase" -StartUpProjectName "ConsolePricelistLoader" -ContextTypeName DataBase.Context.DataBaseContext -MigrationsDirectory:EntitiesMigrations
Проверка того, является ли целью контекста существующая база данных...
Обнаруженная база данных создана с помощью инициализатора базы данных. Миграция, сформированная на основе скаффолдинга "201712161748219_InitialCreate", соответствующая существующей базе данных. Чтобы использовать вместо нее автоматическую миграцию, удалите папку Migrations и выполните команду Enable-Migrations повторно, указав параметр -EnableAutomaticMigrations.
Code First Migrations включены для проекта DataBase.
PM>
PM> Add-Migration -configuration DataBase.EntitiesMigrations.Configuration InitialEntities -ProjectName "DataBase" -StartUpProjectName "ConsolePricelistLoader"
Миграция на основе скаффолдинга "InitialEntities".
Код конструктора для этого файла миграции содержит моментальный снимок текущей модели Code First. Этот моментальный снимок используется для вычисления изменений, вносимых в модель, при формировании на основе скаффолдинга следующей миграции. При внесении в модель дополнительных изменений, которые требуется включить в эту миграцию, можно сформировать на основе скаффолдинга повторно, снова выполнив команду "Add-Migration InitialEntities".
PM>
PM> Update-Database -configuration:DataBase.EntitiesMigrations.Configuration -ProjectName "DataBase" -StartUpProjectName "ConsolePricelistLoader" -Verbose
Using StartUp project 'ConsolePricelistLoader'.
Укажите флаг "-Verbose", чтобы отобразить инструкции SQL, применяемые к целевой базе данных.
Целевая база данных: "ServerPriceList" (источник данных: APPSERVER, поставщик: System.Data.SqlClient, источник: Configuration).
Применение явных миграций: [201712161840322_InitialEntities].
Применение явной миграции: 201712161840322_InitialEntities.
CREATE PROCEDURE [dbo].[PrepareToUpdateBrands]
    @login [nvarchar](30),
    @lastUpdate [datetimeoffset](7)
AS
BEGIN
    -- +---------------------------------------------------+                                           
    -- | © 2017-2018 OLEXANDR LIKHOSHVA ALL RIGHT RESERVED |                                           
    -- | https://www.linkedin.com/in/olexandrlikhoshva/    |                                           
    -- +---------------------------------------------------+                                           
    -- SET NOCOUNT ON added to prevent extra result sets from                                          
    -- interfering with SELECT statements.                                                             
    
    SET NOCOUNT ON;                                                                                    
    
    -- BrandItemEntity = 1                                                                             
    -- CatalogItemEntity = 2                                                                           
    -- DirectoryEntity = 3                                                                             
    -- PhotoItemEntity = 5                                                                             
    -- ProductDirectionEntity = 6                                                                      
    
    declare @entityName int = 1;                                                                       
    declare @dateOfCreation datetimeoffset(7) = Sysdatetimeoffset();                                   
    declare @countToUpdate bigint;                                                                     
    
    INSERT INTO [dbo].[SendItemsEntities]                                                              
    ([Login], [EntityId], [Brands].[EntityName], [Brands].[RequestDate], [Brands].[DateOfCreation])    
    SELECT @login, [Id], @entityName, @lastUpdate, @dateOfCreation                                     
    FROM  [dbo].[BrandItemEntities] AS [Brands]                                                        
    WHERE [Brands].[LastUpdated] > @lastUpdate AND                                                     
    NOT EXISTS (SELECT *                                                                         
    FROM  [dbo].[SendItemsEntities] AS [SendItem]                                    
    WHERE [SendItem].[EntityId] = [Brands].[Id] AND                                  
    [SendItem].[Login] = @login AND                                            
    [SendItem].[EntityName] = @entityName);                                    
    
    SELECT @countToUpdate = (SELECT COUNT(*)                                                           
    FROM  [dbo].[SendItemsEntities]                                           
    WHERE [Login] = @login AND                                                
    [EntityName] = @entityName);                              
    
    RETURN (@countToUpdate);                                                                           
    
END
CREATE PROCEDURE [dbo].[PrepareToUpdateCatalogs]
    @login [nvarchar](30),
    @lastUpdate [datetimeoffset](7)
AS
BEGIN
    -- +---------------------------------------------------+                                              
    -- | © 2017-2018 OLEXANDR LIKHOSHVA ALL RIGHT RESERVED |                                              
    -- | https://www.linkedin.com/in/olexandrlikhoshva/    |                                              
    -- +---------------------------------------------------+                                              
    -- SET NOCOUNT ON added to prevent extra result sets from                                             
    -- interfering with SELECT statements.                                                                
    
    SET NOCOUNT ON;                                                                                       
    
    -- BrandItemEntity = 1                                                                                
    -- CatalogItemEntity = 2                                                                              
    -- DirectoryEntity = 3                                                                                
    -- PhotoItemEntity = 5                                                                                
    -- ProductDirectionEntity = 6                                                                         
    
    declare @entityName int = 2;                                                                          
    declare @dateOfCreation datetimeoffset(7) = Sysdatetimeoffset();                                      
    declare @countToUpdate bigint;                                                                        
    
    INSERT INTO [dbo].[SendItemsEntities]                                                                 
    ([Login], [EntityId], [Catalogs].[EntityName], [Catalogs].[RequestDate], [Catalogs].[DateOfCreation]) 
    SELECT @login, [Id], @entityName, @lastUpdate, @dateOfCreation                                        
    FROM  [dbo].[CatalogItemEntities] AS [Catalogs]                                                       
    WHERE [Catalogs].[LastUpdated] > @lastUpdate AND                                                      
    NOT EXISTS (SELECT *                                                                            
    FROM  [dbo].[SendItemsEntities] AS [SendItem]                                       
    WHERE [SendItem].[EntityId] = [Catalogs].[Id] AND                                   
    [SendItem].[Login] = @login AND                                               
    [SendItem].[EntityName] = @entityName);                                       
    
    SELECT @countToUpdate = (SELECT COUNT(*)                                                              
    FROM  [dbo].[SendItemsEntities]                                              
    WHERE [Login] = @login AND                                                   
    [EntityName] = @entityName);                                 
    
    RETURN (@countToUpdate);                                                                              
    
END
CREATE PROCEDURE [dbo].[PrepareToUpdateDirectories]
    @login [nvarchar](30),
    @lastUpdate [datetimeoffset](7)
AS
BEGIN
    -- +---------------------------------------------------+                                                       
    -- | © 2017-2018 OLEXANDR LIKHOSHVA ALL RIGHT RESERVED |                                                       
    -- | https://www.linkedin.com/in/olexandrlikhoshva/    |                                                       
    -- +---------------------------------------------------+                                                       
    -- SET NOCOUNT ON added to prevent extra result sets from                                                      
    -- interfering with SELECT statements.                                                                         
    
    SET NOCOUNT ON;                                                                                                
    
    -- BrandItemEntity = 1                                                                                         
    -- CatalogItemEntity = 2                                                                                       
    -- DirectoryEntity = 3                                                                                         
    -- PhotoItemEntity = 5                                                                                         
    -- ProductDirectionEntity = 6                                                                                  
    
    declare @entityName int = 3;                                                                                   
    declare @dateOfCreation datetimeoffset(7) = Sysdatetimeoffset();                                               
    declare @countToUpdate bigint;                                                                                 
    
    INSERT INTO [dbo].[SendItemsEntities]                                                                          
    ([Login], [EntityId], [Directories].[EntityName], [Directories].[RequestDate], [Directories].[DateOfCreation]) 
    SELECT @login, [Id], @entityName, @lastUpdate, @dateOfCreation                                                 
    FROM  [dbo].[DirectoryEntity] AS [Directories]                                                                 
    WHERE [Directories].[LastUpdated] > @lastUpdate AND                                                            
    NOT EXISTS (SELECT *                                                                                     
    FROM  [dbo].[SendItemsEntities] AS [SendItem]                                                
    WHERE [SendItem].[EntityId] = [Directories].[Id] AND                                         
    [SendItem].[Login] = @login AND                                                        
    [SendItem].[EntityName] = @entityName);                                                
    
    SELECT @countToUpdate = (SELECT COUNT(*)                                                                       
    FROM  [dbo].[SendItemsEntities]                                                       
    WHERE [Login] = @login AND                                                            
    [EntityName] = @entityName);                                          
    
    RETURN (@countToUpdate);                                                                                       
    
END
CREATE PROCEDURE [dbo].[PrepareToUpdatePhotos]
    @login [nvarchar](30),
    @lastUpdate [datetimeoffset](7)
AS
BEGIN
    -- +---------------------------------------------------+                                              
    -- | © 2017-2018 OLEXANDR LIKHOSHVA ALL RIGHT RESERVED |                                              
    -- | https://www.linkedin.com/in/olexandrlikhoshva/    |                                              
    -- +---------------------------------------------------+                                              
    -- SET NOCOUNT ON added to prevent extra result sets from                                             
    -- interfering with SELECT statements.                                                                
    
    SET NOCOUNT ON;                                                                                       
    
    -- BrandItemEntity = 1                                                                                
    -- CatalogItemEntity = 2                                                                              
    -- DirectoryEntity = 3                                                                                
    -- PhotoItemEntity = 5                                                                                
    -- ProductDirectionEntity = 6                                                                         
    
    declare @entityName int = 5;                                                                          
    declare @dateOfCreation datetimeoffset(7) = Sysdatetimeoffset();                                      
    declare @countToUpdate bigint;                                                                        
    
    INSERT INTO [dbo].[SendItemsEntities]                                                                 
    ([Login], [EntityId], [Photos].[EntityName], [Photos].[RequestDate], [Photos].[DateOfCreation])       
    SELECT @login, [Id], @entityName, @lastUpdate, @dateOfCreation                                        
    FROM  [dbo].[PhotoItemEntity] AS [Photos]                                                             
    WHERE [Photos].[LastUpdated] > @lastUpdate AND                                                        
    NOT EXISTS (SELECT *                                                                            
    FROM  [dbo].[SendItemsEntities] AS [SendItem]                                       
    WHERE [SendItem].[EntityId] = [Photos].[Id] AND                                     
    [SendItem].[Login] = @login AND                                               
    [SendItem].[EntityName] = @entityName);                                       
    
    SELECT @countToUpdate = (SELECT COUNT(*)                                                              
    FROM  [dbo].[SendItemsEntities]                                              
    WHERE [Login] = @login AND                                                   
    [EntityName] = @entityName);                                 
    
    RETURN (@countToUpdate);                                                                              
    
END
CREATE PROCEDURE [dbo].[PrepareToUpdateProductDirections]
    @login [nvarchar](30),
    @lastUpdate [datetimeoffset](7)
AS
BEGIN
    -- +---------------------------------------------------+                                                                                        
    -- | © 2017-2018 OLEXANDR LIKHOSHVA ALL RIGHT RESERVED |                                                                                        
    -- | https://www.linkedin.com/in/olexandrlikhoshva/    |                                                                                        
    -- +---------------------------------------------------+                                                                                        
    -- SET NOCOUNT ON added to prevent extra result sets from                                                                                       
    -- interfering with SELECT statements.                                                                                                          
    
    SET NOCOUNT ON;                                                                                                                                 
    
    -- BrandItemEntity = 1                                                                                                                          
    -- CatalogItemEntity = 2                                                                                                                        
    -- DirectoryEntity = 3                                                                                                                          
    -- PhotoItemEntity = 5                                                                                                                          
    -- ProductDirectionEntity = 6                                                                                                                   
    
    declare @entityName int = 6;                                                                                                                    
    declare @dateOfCreation datetimeoffset(7) = Sysdatetimeoffset();                                                                                
    declare @countToUpdate bigint;                                                                                                                  
    
    INSERT INTO [dbo].[SendItemsEntities]                                                                                                           
    ([Login], [EntityId], [ProductDirectionEntity].[EntityName], [ProductDirectionEntity].[RequestDate], [ProductDirectionEntity].[DateOfCreation]) 
    SELECT @login, [Id], @entityName, @lastUpdate, @dateOfCreation                                                                                  
    FROM  [dbo].[ProductDirectionEntity] AS [ProductDirectionEntity]                                                                                
    WHERE [ProductDirectionEntity].[LastUpdated] > @lastUpdate AND                                                                                  
    NOT EXISTS (SELECT *                                                                                                                      
    FROM  [dbo].[SendItemsEntities] AS [SendItem]                                                                                 
    WHERE [SendItem].[EntityId] = [ProductDirectionEntity].[Id] AND                                                               
    [SendItem].[Login] = @login AND                                                                                         
    [SendItem].[EntityName] = @entityName);                                                                                 
    
    SELECT @countToUpdate = (SELECT COUNT(*)                                                                                                        
    FROM  [dbo].[SendItemsEntities]                                                                                        
    WHERE [Login] = @login AND                                                                                             
    [EntityName] = @entityName);                                                                           
    
    RETURN (@countToUpdate);                                                                                                                        
    
END
INSERT [dbo].[__MigrationHistory]([MigrationId], [ContextKey], [Model], [ProductVersion])
VALUES (N'201712161840322_InitialEntities', N'DataBase.Context.DataBaseContext',  

Метод Running Seed.
PM>   