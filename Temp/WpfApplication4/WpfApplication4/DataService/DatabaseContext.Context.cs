//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApplication4.DataService
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ServerPriceListEntities : DbContext
    {
        public ServerPriceListEntities()
            : base("name=ServerPriceListEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<BrandItemEntities> BrandItemEntities { get; set; }
        public virtual DbSet<CatalogItemEntities> CatalogItemEntities { get; set; }
        public virtual DbSet<CommodityDirectionEntities> CommodityDirectionEntities { get; set; }
        public virtual DbSet<DirectoryEntities> DirectoryEntities { get; set; }
        public virtual DbSet<NomenclatureGroupEntities> NomenclatureGroupEntities { get; set; }
        public virtual DbSet<OptionItemEntities> OptionItemEntities { get; set; }
        public virtual DbSet<OrderEntities> OrderEntities { get; set; }
        public virtual DbSet<PhotoItemEntities> PhotoItemEntities { get; set; }
        public virtual DbSet<ProductDirectionEntities> ProductDirectionEntities { get; set; }
        public virtual DbSet<SendItemsEntities> SendItemsEntities { get; set; }
    
        public virtual int sp_prepare_to_update_catalogs(string login, Nullable<System.DateTimeOffset> last_update)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var last_updateParameter = last_update.HasValue ?
                new ObjectParameter("last_update", last_update) :
                new ObjectParameter("last_update", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_prepare_to_update_catalogs", loginParameter, last_updateParameter);
        }
    }
}
